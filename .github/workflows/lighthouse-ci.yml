name: Lighthouse CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    env:
      # Mock environment variables for CI testing
      DATABASE_URL: postgresql://ci:ci@localhost:5432/lighthouse_ci_test
      NODE_ENV: production
      REPLIT_DOMAINS: localhost
      OPENAI_API_KEY: sk-mock-key-for-ci-testing
      STRIPE_SECRET_KEY: sk_test_mock
      STRIPE_WEBHOOK_SECRET: whsec_mock
      STRIPE_PRO_PRICE_ID: price_mock
      STRIPE_ENTERPRISE_PRICE_ID: price_mock

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.12.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NODE_ENV: ${{ env.NODE_ENV }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 30

      - name: Comment PR with Lighthouse results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const manifestPath = '.lighthouseci/manifest.json';
              
              if (!fs.existsSync(manifestPath)) {
                console.log('Manifest file not found, skipping comment');
                return;
              }
              
              const results = fs.readFileSync(manifestPath, 'utf8');
              const manifest = JSON.parse(results);
              
              if (!manifest || !manifest[0] || !manifest[0].summary) {
                console.log('Invalid manifest format, skipping comment');
                return;
              }

              const summary = manifest[0].summary;
              
              // Create a comment with the results
              const comment = `## üîç Lighthouse CI Results

            Performance scores for this PR:

            - **Performance**: ${Math.round(summary.performance * 100)}/100
            - **Accessibility**: ${Math.round(summary.accessibility * 100)}/100
            - **Best Practices**: ${Math.round(summary['best-practices'] * 100)}/100
            - **SEO**: ${Math.round(summary.seo * 100)}/100

            ${manifest[0].url ? `[View full report](${manifest[0].url})` : ''}`;

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.error('Error creating Lighthouse comment:', error);
              // Don't fail the workflow if commenting fails
            }
